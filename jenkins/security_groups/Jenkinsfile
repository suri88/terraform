pipeline {

    agent any

    parameters {

    choice(name: 'role_account',
        choices: ['707783183724','762127463824','417417470155','919173928247','977425150090','734839700165','108520179445','123097108614','253634665593','005023280388','417939946582','665259306775','646650208476','383767217836','199624650114','460553977786','595525503433','883143595252','706814884767','611140932665','300589781518','750263846051'],
        description: "Which account would you like to deploy your VPC?\n 707783183724:ntw\n762127463824:cicd\n417417470155:sss\n919173928247:talendDev\n977425150090:ReportingDev\n734839700165:CyberArk\n108520179445:Referential-dev\n123097108614:Transparence-Dev\n253634665593:Referential-SIT\n005023280388:Transparence-SIT\n417939946582:Referential-UAT\n665259306775:Transparence-UAT\n646650208476:Referential-Prod\n383767217836:Transparence-Prod\n199624650114:PUP-DEV\n460553977786:PUP-SIT\n595525503433:PUP-UAT\n883143595252:PUP-PROD\n706814884767:Scala-DEV\n611140932665:Scala-SIT\n300589781518:Scala-UAT\n750263846051:Scala-PROD\n")

    choice(name: 'role_account_name',
        choices: ['upsa-cicd','upsa-sharedservices','upsa-network','upsa-talend','upsa-cyberark','upsa-referential','upsa-transparence','upsa-pup','upsa-scala'],
        description: 'Which account name would you like to deploy your VPC?.. Example upsa-sharedservices')


        choice(name: 'app_env_name',
                choices: ['dev','sit','uat','prd','NA'],
                description: 'Which environment name would you like to deploy your security_group?.. Example dev')

        choice(name: 'aws_region',
            choices: ['eu-west-3'],
            description: 'Where would you like to deploy your security_group?.. Examples eu-west-1, eu-central-1')

        string(name: 'security_groups_name',defaultValue: '', description: 'security_groups name')

        string(name: 'git_branch_name', defaultValue: '', description: 'git branch name')

        choice(name: 'env_variables',
                choices: ['paris'],
                description: 'Please select the variable file to apply.. Examples paris')

        choice(name: 'build_option',
            choices: ['','plan','apply', 'destroy'],
            description: 'Apply will deploy a security_groups, and Destroy will remove the security_groups..')


    }

    environment {

        AWS_DEFAULT_REGION = "${params.aws_region}"
        BUILD_OPTION = "${params.build_option}"
        TF_HOME = tool('terraform-0.12.12')
        TF_IN_AUTOMATION = "true"
        PATH = "$TF_HOME:$PATH"
        DIR_PATH=""
        BACKEND_HCL_PATH=""
    }

    stages {

        stage('Parameters') {

            steps {

                echo "You have selected account: ${params.role_account}"
                echo "You Selected: ${params.aws_region}"

                script {
                    if("${params.app_env_name}" != "NA") {
                        echo "Environment is ${app_env_name}"
                        DIR_PATH = "terraform/accounts/${params.role_account_name}/${params.app_env_name}/security_groups/${params.security_groups_name}"
                        BACKEND_HCL_PATH = "../.."

                    } else {
                        echo "Environment is not Applicable.."
                        DIR_PATH = "terraform/accounts/${params.role_account_name}/security_groups/${params.security_groups_name}"
                        BACKEND_HCL_PATH = "../.."
                    }

                }
            }
        }


        stage('Clean Directory') {

            steps {

                deleteDir()
            }
        }

        stage('Checkout upsa-repo Repository') {

            steps {

                git branch: "${git_branch_name}",
                    credentialsId: 'gitlab-cred-id',
                    url: 'https://gitlab.dev.upsa.cf/Yomi.Ogunyinka/upsa-repos.git'
            }
        }

        stage('Build Phase: Plan') {

            when {

                expression {

                    params.build_option == 'plan'

                    }
                }

            steps {

                    withCredentials(
                        [
                            string(credentialsId: 'ExternalId', variable: 'external_id')
                        ]
                    )

                        {
                            echo "Applying AWS Credentials!.."

                    withAWS(credentials: 'aws-credentials',
                            region: "${params.aws_region}",
                            role:'jenkins',
                            roleAccount:"${params.role_account}",
                            externalId: "$external_id",
                            duration: 900,
                            roleSessionName: 'jenkins-session')
                        {
                            echo "This will be deployed into account ${params.role_account}"
                            echo "This will be deployed into the ${params.aws_region} region"

                            dir ("${DIR_PATH}")

                        {
                            sh "terraform -version"
                            sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                            sh "terraform get"
                            sh 'terraform ${build_option} -var="region=${aws_region}" \
                                -var-file="${env_variables}".tfvars '
                        }
                    }
                }
            }
        }
        stage('Build Phase: Apply') {

            when {

                expression {

                    params.build_option == 'apply'

                    }
                }

            steps {

                    withCredentials(
                        [
                            string(credentialsId: 'ExternalId', variable: 'external_id')
                        ]
                    )

                        {
                            echo "Applying AWS Credentials!.."

                    withAWS(credentials: 'aws-credentials',
                            region: "${params.aws_region}",
                            role:'jenkins',
                            roleAccount:"${params.role_account}",
                            externalId: "$external_id",
                            duration: 900,
                            roleSessionName: 'jenkins-session')
                        {
                            echo "This will be deployed into account ${params.role_account}"
                            echo "This will be deployed into the ${params.aws_region} region"

                            dir ("${DIR_PATH}")

                        {
                            sh "terraform -version"
                            sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                            sh "terraform get"
                            sh 'terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${env_variables}.tfvars -auto-approve'
                        }
                    }
                }
            }
        }
         stage('Build Phase: Destroy') {

            when {

                expression {

                    params.build_option == 'destroy'

                    }
                }

            steps {

                    withCredentials(
                        [
                            string(credentialsId: 'ExternalId', variable: 'external_id')
                        ]
                    )

                        {
                            echo "Applying AWS Credentials!.."

                    withAWS(credentials: 'aws-credentials',
                            region: "${params.aws_region}",
                            role:'jenkins',
                            roleAccount:"${params.role_account}",
                            externalId: "$external_id",
                            duration: 900,
                            roleSessionName: 'jenkins-session')
                        {
                            echo "This will be deployed into account ${params.role_account}"
                            echo "This will be deployed into the ${params.aws_region} region"

                            dir ("${DIR_PATH}")

                        {
                            sh "terraform -version"
                            sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                            sh "terraform get"
                            sh 'terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${env_variables}.tfvars -auto-approve'
                        }
                    }
                }
            }
        }



    }
}

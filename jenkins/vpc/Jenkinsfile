pipeline {

    agent any

    parameters {

        choice(name: 'role_account',
            choices: ['707783183724','762127463824','417417470155','919173928247','977425150090','734839700165','108520179445','123097108614','253634665593','005023280388','417939946582','665259306775','646650208476','383767217836','199624650114','460553977786','595525503433','883143595252','977425150090'],
            description: "Which account would you like to deploy your VPC?\n 707783183724:ntw\n762127463824:cicd\n417417470155:sss\n919173928247:talendDev\n977425150090:ReportingDev\n734839700165:CyberArk\n108520179445:Referential-dev\n123097108614:Transparence-Dev\n253634665593:Referential-SIT\n005023280388:Transparence-SIT\n417939946582:Referential-UAT\n665259306775:Transparence-UAT\n646650208476:Referential-Prod\n383767217836:Transparence-Prod\n199624650114:PUP-DEV\n460553977786:PUP-SIT\n595525503433:PUP-UAT\n883143595252:PUP-PROD\n977425150090:Reporting-Dev\n")
        
        choice(name: 'role_account_name',
            choices: ['upsa-cicd','upsa-sharedservices','upsa-network','upsa-talend','upsa-cyberark','upsa-referential','upsa-transparence','upsa-pup','upsa-reporting'],
            description: 'Which account name would you like to deploy your VPC?.. Example upsa-sharedservices')

        choice(name: 'app_env_name',
                choices: ['dev','sit','uat','prd','NA'],
                description: 'Which environment name would you like to deploy your VPC?.. Example dev')

        choice(name: 'aws_region',
            choices: ['eu-west-3','eu-west-1'],
            description: 'Where would you like to deploy your VPC?.. Examples eu-west-1, eu-central-1')

        string(name: 'vpc_name',defaultValue: '', description: 'vpc name')

        string(name: 'git_branch_name', defaultValue: '', description: 'git branch name')

        choice(name: 'env_variables',
                choices: ['paris','ireland'],
                description: 'Please select the variable file to apply.. Examples paris')

        choice(name: 'build_option',
            choices: ['','plan','apply', 'destroy'],
            description: 'Apply will deploy a VPC, and Destroy will remove the VPC..')

        choice(name: 'post_vpc_steps',
            choices: ['true','false'],
            description: 'Need post vpc creation steps??..')

        choice(name: 'tgw_attachment_ignore',
                choices: ['true','false'],
                description: 'tgw attachment can be ignored for Vpc recreation and for destroy operations??..')                


    }

    environment {

        AWS_DEFAULT_REGION = "${params.aws_region}"
        BUILD_OPTION = "${params.build_option}"
        TF_HOME = tool('terraform-0.12.12')
        TF_IN_AUTOMATION = "true"
        PATH = "$TF_HOME:$PATH"
        DIR_PATH=""
        TFVARS_DIR = ""
        BACKEND_HCL_PATH=""
        NTW_DIR_PATH="terraform/accounts/upsa-network"
        network_account = "707783183724"
    }

    stages {

        stage('Parameters') {

            steps {

                echo "You have selected account: ${params.role_account}"
                echo "You Selected: ${params.aws_region}"

                script {
                    if("${params.app_env_name}" != "NA") {
                        echo "Environment is ${app_env_name}"
                        DIR_PATH = "terraform/accounts/${params.role_account_name}/${params.app_env_name}/vpcs/${params.vpc_name}"
                        BACKEND_HCL_PATH = "../../.."
                        TFVARS_DIR = "${WORKSPACE}/${DIR_PATH}"

                    } else {
                        echo "Environment is not Applicable.."
                        DIR_PATH = "terraform/accounts/${params.role_account_name}/vpcs/${params.vpc_name}"
                        BACKEND_HCL_PATH = "../../.."
                        TFVARS_DIR = "${WORKSPACE}/${DIR_PATH}"
                    }

                }
            }
        }


       stage('Clean the previous builds') {

            steps {
                deleteDir()
            }
        }

        stage('Checkout upsa-repo Repository') {

            steps {

                git branch: "${git_branch_name}",
                    credentialsId: 'gitlab-cred-id',
                    url: 'https://gitlab.dev.upsa.cf/Yomi.Ogunyinka/upsa-repos.git'
            }
        }

        stage('Change Terraform State') {

            steps {


                  echo  "*********************************************************"
                  echo  "*********Change Terraform State************"
                  echo  "*********************************************************"
                  script {
                    if("${params.app_env_name}" != "NA") {
                        echo "Environment is ${app_env_name}"

                        sh """
                            sed -i "s/TERRAFORM_STATE_KEY/${params.role_account_name}\\/${params.app_env_name}\\/vpcs\\/${params.vpc_name}\\/terraform.tfstate/g" ${WORKSPACE}/${DIR_PATH}/vpc_subnets/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/${params.role_account_name}\\/${params.app_env_name}\\/vpcs\\/${params.vpc_name}\\/routes\\/terraform.tfstate/g" ${WORKSPACE}/${DIR_PATH}/routes/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/upsa-network\\/transit-gateway\\/${params.vpc_name}\\/ram\\/terraform.tfstate/g" ${WORKSPACE}/${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/ram/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/upsa-network\\/transit-gateway\\/${params.vpc_name}\\/ntw-egress-routes\\/terraform.tfstate/g" ${WORKSPACE}/${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/ntw-egress-routes/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/upsa-network\\/transit-gateway\\/${params.vpc_name}\\/tgw-accept\\/terraform.tfstate/g" ${WORKSPACE}/${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/tgw-accept/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/upsa-network\\/transit-gateway\\/${params.vpc_name}\\/tgw-routes\\/terraform.tfstate/g" ${WORKSPACE}/${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/tgw-routes/remote_state.tf
                                   

                           """
                  

                    } else {
                        echo "Environment is not Applicable.."
                        
                        sh """
                            sed -i "s/TERRAFORM_STATE_KEY/${params.role_account_name}\\/vpcs\\/${params.vpc_name}\\/terraform.tfstate/g" ${WORKSPACE}/${DIR_PATH}/vpc_subnets/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/${params.role_account_name}\\/vpcs\\/${params.vpc_name}\\/routes\\/terraform.tfstate/g" ${WORKSPACE}/${DIR_PATH}/routes/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/upsa-network\\/transit-gateway\\/${params.vpc_name}\\/ram\\/terraform.tfstate/g" ${WORKSPACE}/${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/ram/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/upsa-network\\/transit-gateway\\/${params.vpc_name}\\/ntw-egress-routes\\/terraform.tfstate/g" ${WORKSPACE}/${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/ntw-egress-routes/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/upsa-network\\/transit-gateway\\/${params.vpc_name}\\/tgw-accept\\/terraform.tfstate/g" ${WORKSPACE}/${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/tgw-accept/remote_state.tf
                            sed -i "s/TERRAFORM_STATE_KEY/upsa-network\\/transit-gateway\\/${params.vpc_name}\\/tgw-routes\\/terraform.tfstate/g" ${WORKSPACE}/${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/tgw-routes/remote_state.tf
                                   

                           """
                    }

                    sh """
                            cp ${WORKSPACE}/${DIR_PATH}/../../backend_${env_variables}.hcl ${WORKSPACE}/${DIR_PATH}/../../backend.hcl
                            cp ${WORKSPACE}/${NTW_DIR_PATH}/backend_${env_variables}.hcl ${WORKSPACE}/${NTW_DIR_PATH}/backend.hcl
                    """

                   }
                  


 
            }
        }        

        stage('Build Phase: Plan') {

            when {

                expression {

                    params.build_option == 'plan'

                    }
                }

            steps {


                  echo  "*********************************************************"
                  echo  "*********Build Phase: Plan************"
                  echo  "*********************************************************"                

                    withCredentials(
                        [
                            string(credentialsId: 'ExternalId', variable: 'external_id')
                        ]
                    )

                        {
                            echo "Applying AWS Credentials!.."

                    withAWS(credentials: 'aws-credentials',
                            region: "${params.aws_region}",
                            role:'jenkins',
                            roleAccount:"${params.role_account}",
                            externalId: "$external_id",
                            duration: 900,
                            roleSessionName: 'jenkins-session')
                        {
                            echo "This will be deployed into account ${params.role_account}"
                            echo "This will be deployed into the ${params.aws_region} region"

                            dir ("${DIR_PATH}/vpc_subnets")

                        {
                            sh "terraform -version"
                            sh "terraform init -backend-config=${BACKEND_HCL_PATH}/../backend.hcl"
                            sh "terraform get"
                            sh """
                               terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${TFVARS_DIR}/${env_variables}.tfvars
                              """

                        }
                    }
                }
            }
        }
        stage('Build Phase: Apply') {

            when {

                expression {

                    params.build_option == 'apply'

                    }
                }

            steps {

                  echo  "*********************************************************"
                  echo  "*********VPC and Subnets Creation************"
                  echo  "*********************************************************"                    

                    withCredentials(
                        [
                            string(credentialsId: 'ExternalId', variable: 'external_id')
                        ]
                    )

                        {
                            echo "Applying AWS Credentials!.."

                    withAWS(credentials: 'aws-credentials',
                            region: "${params.aws_region}",
                            role:'jenkins',
                            roleAccount:"${params.role_account}",
                            externalId: "$external_id",
                            duration: 900,
                            roleSessionName: 'jenkins-session')
                        {
                            echo "This will be deployed into account ${params.role_account}"
                            echo "This will be deployed into the ${params.aws_region} region"

                            dir ("${DIR_PATH}/vpc_subnets")

                        {
                            sh "terraform -version"
                            sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                            sh "terraform get"
                            sh """
                               terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${TFVARS_DIR}/${env_variables}.tfvars -auto-approve
                              """                                
                        }
                    }
                }
            }
        }
 

        stage('RAM share Creation') {

           when {

               expression {

                   params.post_vpc_steps == 'true'

                   }
               }

           steps {

                  echo  "*********************************************************"
                  echo  "*********RAM share Creation************"
                  echo  "*********************************************************"                

                   withCredentials(
                       [
                           string(credentialsId: 'ExternalId', variable: 'external_id')
                       ]
                   )

                       {
                           echo "Applying AWS Credentials!.."

                   withAWS(credentials: 'aws-credentials',
                           region: "${params.aws_region}",
                           role:'jenkins',
                           roleAccount:"${network_account}",
                           externalId: "$external_id",
                           duration: 900,
                           roleSessionName: 'jenkins-session')
                       {
                           echo "This will be deployed into account ${network_account}"
                           echo "This will be deployed into the ${params.aws_region} region"

                           dir ("${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/ram")

                       {
                           sh "terraform -version"
                           sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                           sh "terraform get"
                            sh """
                               terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${TFVARS_DIR}/${env_variables}.tfvars -auto-approve
                              """
                       }
                   }
               }
           }
       }

        stage('Create TGW VPC Attachment') {

           when {

               expression {

                   params.post_vpc_steps == 'true' && params.tgw_attachment_ignore == 'false'

                   }
               }

           steps {

                  echo  "*********************************************************"
                  echo  "*********Create TGW VPC Attachment************"
                  echo  "*********************************************************"               

                   withCredentials(
                       [
                           string(credentialsId: 'ExternalId', variable: 'external_id')
                       ]
                   )

                       {
                           echo "Applying AWS Credentials!.."

                   withAWS(credentials: 'aws-credentials',
                           region: "${params.aws_region}",
                           role:'jenkins',
                           roleAccount:"${params.role_account}",
                           externalId: "$external_id",
                           duration: 900,
                           roleSessionName: 'jenkins-session')
                       {
                           echo "This will be deployed into account ${params.role_account}"
                           echo "This will be deployed into the ${params.aws_region} region"

                           dir ("${DIR_PATH}/tgw_attach")

                       {
                           sh "rm -fr .terraform"
                           sh "terraform -version"
                           sh "terraform init"
                           sh "terraform get"
                           sh """
                               terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${TFVARS_DIR}/${env_variables}.tfvars -auto-approve
                              """
                       }
                   }
               }
           }
       }


       stage('Accept VPC attachment') {

          when {

              expression {

                  params.post_vpc_steps == 'true' && params.tgw_attachment_ignore == 'false'

                  }
              }

          steps {


                  echo  "*********************************************************"
                  echo  "*********Accept VPC attachment************"
                  echo  "*********************************************************"               

                  withCredentials(
                      [
                          string(credentialsId: 'ExternalId', variable: 'external_id')
                      ]
                  )

                      {
                          echo "Applying AWS Credentials!.."

                  withAWS(credentials: 'aws-credentials',
                          region: "${params.aws_region}",
                          role:'jenkins',
                          roleAccount:"${network_account}",
                          externalId: "$external_id",
                          duration: 900,
                          roleSessionName: 'jenkins-session')
                      {
                          echo "This will be deployed into account ${network_account}"
                          echo "This will be deployed into the ${params.aws_region} region"

                          dir ("${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/tgw-accept")

                      {
                          sh "terraform -version"
                          sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                          sh "terraform get"
                          sh """
                               terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${TFVARS_DIR}/${env_variables}.tfvars -auto-approve
                             """
                      }
                  }
              }
          }
      }

        stage('Transit Gateway Routes') {

           when {

               expression {

                   params.post_vpc_steps == 'true'

                   }
               }

           steps {

                  echo  "*********************************************************"
                  echo  "*********Transit Gateway Routes************"
                  echo  "*********************************************************"                

                   withCredentials(
                       [
                           string(credentialsId: 'ExternalId', variable: 'external_id')
                       ]
                   )

                       {
                           echo "Applying AWS Credentials!.."

                   withAWS(credentials: 'aws-credentials',
                           region: "${params.aws_region}",
                           role:'jenkins',
                           roleAccount:"${network_account}",
                           externalId: "$external_id",
                           duration: 900,
                           roleSessionName: 'jenkins-session')
                       {
                           echo "This will be deployed into account ${network_account}"
                           echo "This will be deployed into the ${params.aws_region} region"

                           dir ("${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/tgw-routes")

                       {
                           sh "terraform -version"
                           sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                           sh "terraform get"
                           sh """
                               terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${TFVARS_DIR}/${env_variables}.tfvars -auto-approve
                              """
                       }
                   }
               }
           }
       }

       stage('VPC Routes to TGW') {

          when {

              expression {

                  params.post_vpc_steps == 'true'

                  }
              }

          steps {

                  echo  "*********************************************************"
                  echo  "*********VPC Routes to TGW************"
                  echo  "*********************************************************"               

                  withCredentials(
                      [
                          string(credentialsId: 'ExternalId', variable: 'external_id')
                      ]
                  )

                      {
                          echo "Applying AWS Credentials!.."

                  withAWS(credentials: 'aws-credentials',
                          region: "${params.aws_region}",
                          role:'jenkins',
                          roleAccount:"${params.role_account}",
                          externalId: "$external_id",
                          duration: 900,
                          roleSessionName: 'jenkins-session')
                      {
                          echo "This will be deployed into account ${params.role_account}"
                          echo "This will be deployed into the ${params.aws_region} region"

                          dir ("${DIR_PATH}/routes")

                      {
                          sh "terraform -version"
                          sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                          sh "terraform get"
                          sh """
                               terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${TFVARS_DIR}/${env_variables}.tfvars -auto-approve
                              """
                      }
                  }
              }
          }
      }


     stage('Network Routes to VPC') {

         when {

             expression {

                 params.post_vpc_steps == 'true'

                 }
             }

         steps {

                  echo  "*********************************************************"
                  echo  "*********Network Routes to VPC************"
                  echo  "*********************************************************"              

                 withCredentials(
                     [
                         string(credentialsId: 'ExternalId', variable: 'external_id')
                     ]
                 )

                     {
                         echo "Applying AWS Credentials!.."

                 withAWS(credentials: 'aws-credentials',
                         region: "${params.aws_region}",
                         role:'jenkins',
                         roleAccount:"${network_account}",
                         externalId: "$external_id",
                         duration: 900,
                         roleSessionName: 'jenkins-session')
                     {
                         echo "This will be deployed into account ${network_account}"
                         echo "This will be deployed into the ${params.aws_region} region"

                         dir ("${NTW_DIR_PATH}/transit-gateway/${params.vpc_name}/ntw-egress-routes")

                     {
                         sh "terraform -version"
                         sh "terraform init -backend-config=${BACKEND_HCL_PATH}/backend.hcl"
                         sh "terraform get"
                         sh """
                               terraform ${build_option} -var="region=${aws_region}" \
                                -var-file=${TFVARS_DIR}/${env_variables}.tfvars -auto-approve
                              """
                     }
                 }
             }
         }
     }



    }
}
